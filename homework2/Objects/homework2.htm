<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\homework2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\homework2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Dec 07 23:10:33 2019
<BR><P>
<H3>Maximum Stack Usage =        152 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; EvrFreeRTOSTasks_TaskIncrementTick &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">NMI_Handler</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">Interrupt0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">Interrupt0_Handler</a><BR>
 <LI><a href="#[9]">Interrupt1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">Interrupt1_Handler</a><BR>
 <LI><a href="#[a]">Interrupt2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">Interrupt2_Handler</a><BR>
 <LI><a href="#[b]">Interrupt3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">Interrupt3_Handler</a><BR>
 <LI><a href="#[c]">Interrupt4_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">Interrupt4_Handler</a><BR>
 <LI><a href="#[d]">Interrupt5_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">Interrupt5_Handler</a><BR>
 <LI><a href="#[e]">Interrupt6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">Interrupt6_Handler</a><BR>
 <LI><a href="#[f]">Interrupt7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">Interrupt7_Handler</a><BR>
 <LI><a href="#[10]">Interrupt8_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">Interrupt8_Handler</a><BR>
 <LI><a href="#[11]">Interrupt9_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">Interrupt9_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4]">HardFault_Handler</a> from startup_armcm0plus.o(.text) referenced from startup_armcm0plus.o(RESET)
 <LI><a href="#[8]">Interrupt0_Handler</a> from startup_armcm0plus.o(.text) referenced from startup_armcm0plus.o(RESET)
 <LI><a href="#[9]">Interrupt1_Handler</a> from startup_armcm0plus.o(.text) referenced from startup_armcm0plus.o(RESET)
 <LI><a href="#[a]">Interrupt2_Handler</a> from startup_armcm0plus.o(.text) referenced from startup_armcm0plus.o(RESET)
 <LI><a href="#[b]">Interrupt3_Handler</a> from startup_armcm0plus.o(.text) referenced from startup_armcm0plus.o(RESET)
 <LI><a href="#[c]">Interrupt4_Handler</a> from startup_armcm0plus.o(.text) referenced from startup_armcm0plus.o(RESET)
 <LI><a href="#[d]">Interrupt5_Handler</a> from startup_armcm0plus.o(.text) referenced from startup_armcm0plus.o(RESET)
 <LI><a href="#[e]">Interrupt6_Handler</a> from startup_armcm0plus.o(.text) referenced from startup_armcm0plus.o(RESET)
 <LI><a href="#[f]">Interrupt7_Handler</a> from startup_armcm0plus.o(.text) referenced from startup_armcm0plus.o(RESET)
 <LI><a href="#[10]">Interrupt8_Handler</a> from startup_armcm0plus.o(.text) referenced from startup_armcm0plus.o(RESET)
 <LI><a href="#[11]">Interrupt9_Handler</a> from startup_armcm0plus.o(.text) referenced from startup_armcm0plus.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from startup_armcm0plus.o(.text) referenced from startup_armcm0plus.o(RESET)
 <LI><a href="#[6]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_armcm0plus.o(RESET)
 <LI><a href="#[14]">Reset_Handler</a> from startup_armcm0plus.o(.text) referenced from startup_armcm0plus.o(RESET)
 <LI><a href="#[5]">SVC_Handler</a> from port.o(i.SVC_Handler) referenced from startup_armcm0plus.o(RESET)
 <LI><a href="#[7]">SysTick_Handler</a> from cmsis_os2.o(i.SysTick_Handler) referenced from startup_armcm0plus.o(RESET)
 <LI><a href="#[12]">SystemInit</a> from system_armcm0plus.o(i.SystemInit) referenced from startup_armcm0plus.o(.text)
 <LI><a href="#[15]">__main</a> from assembly_file.o(test_array) referenced from startup_armcm0plus.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[66]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[59]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[5b]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[6]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; EvrFreeRTOSTasks_TaskSwitchedIn &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0plus.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[14]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_armcm0plus.o(.text))

<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0plus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0plus.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0plus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0plus.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>Interrupt0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0plus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0plus.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>Interrupt1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0plus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0plus.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>Interrupt2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0plus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0plus.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>Interrupt3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0plus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0plus.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>Interrupt4_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0plus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt4_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt4_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0plus.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>Interrupt5_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0plus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt5_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt5_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0plus.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>Interrupt6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0plus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0plus.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Interrupt7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0plus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0plus.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Interrupt8_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0plus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt8_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt8_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0plus.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>Interrupt9_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0plus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt9_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interrupt9_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0plus.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[68]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[21]"></a>EventRecord2</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, eventrecorder.o(i.EventRecord2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventCheckFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_TaskSwitchedOut
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_TaskSwitchedIn
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_TaskPriorityInherit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_TaskPriorityDisinherit
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_TaskIncrementTick
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_PostMovedTaskToReadyState
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_MovedTaskToReadyState
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_QueueSendFailed
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_QueueSend
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_QueueReceiveFailed
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_QueueReceive
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_QueueDelete
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_QueueCreateFailed
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_QueueCreate
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_CreateMutexFailed
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_CreateMutex
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_BlockingOnQueueSend
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_BlockingOnQueueReceive
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSHeap_Malloc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSHeap_Free
</UL>

<P><STRONG><a name="[1e]"></a>EventRecorderTimerGetCount</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eventrecorder.o(i.EventRecorderTimerGetCount))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[24]"></a>EvrFreeRTOSHeap_Free</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, freertos_evr.o(i.EvrFreeRTOSHeap_Free), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrFreeRTOSHeap_Free &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>

<P><STRONG><a name="[25]"></a>EvrFreeRTOSHeap_Malloc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, freertos_evr.o(i.EvrFreeRTOSHeap_Malloc), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrFreeRTOSHeap_Malloc &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[26]"></a>EvrFreeRTOSQueue_BlockingOnQueueReceive</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, freertos_evr.o(i.EvrFreeRTOSQueue_BlockingOnQueueReceive), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrFreeRTOSQueue_BlockingOnQueueReceive &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[27]"></a>EvrFreeRTOSQueue_BlockingOnQueueSend</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, freertos_evr.o(i.EvrFreeRTOSQueue_BlockingOnQueueSend), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrFreeRTOSQueue_BlockingOnQueueSend &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[28]"></a>EvrFreeRTOSQueue_CreateMutex</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, freertos_evr.o(i.EvrFreeRTOSQueue_CreateMutex), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrFreeRTOSQueue_CreateMutex &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>

<P><STRONG><a name="[29]"></a>EvrFreeRTOSQueue_CreateMutexFailed</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, freertos_evr.o(i.EvrFreeRTOSQueue_CreateMutexFailed), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrFreeRTOSQueue_CreateMutexFailed &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>

<P><STRONG><a name="[2a]"></a>EvrFreeRTOSQueue_QueueCreate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, freertos_evr.o(i.EvrFreeRTOSQueue_QueueCreate), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrFreeRTOSQueue_QueueCreate &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[2b]"></a>EvrFreeRTOSQueue_QueueCreateFailed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, freertos_evr.o(i.EvrFreeRTOSQueue_QueueCreateFailed), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrFreeRTOSQueue_QueueCreateFailed &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[2c]"></a>EvrFreeRTOSQueue_QueueDelete</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, freertos_evr.o(i.EvrFreeRTOSQueue_QueueDelete), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrFreeRTOSQueue_QueueDelete &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[2d]"></a>EvrFreeRTOSQueue_QueueReceive</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, freertos_evr.o(i.EvrFreeRTOSQueue_QueueReceive), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrFreeRTOSQueue_QueueReceive &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[2e]"></a>EvrFreeRTOSQueue_QueueReceiveFailed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, freertos_evr.o(i.EvrFreeRTOSQueue_QueueReceiveFailed), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrFreeRTOSQueue_QueueReceiveFailed &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[2f]"></a>EvrFreeRTOSQueue_QueueSend</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, freertos_evr.o(i.EvrFreeRTOSQueue_QueueSend), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrFreeRTOSQueue_QueueSend &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[30]"></a>EvrFreeRTOSQueue_QueueSendFailed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, freertos_evr.o(i.EvrFreeRTOSQueue_QueueSendFailed), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrFreeRTOSQueue_QueueSendFailed &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[31]"></a>EvrFreeRTOSTasks_MovedTaskToReadyState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, freertos_evr.o(i.EvrFreeRTOSTasks_MovedTaskToReadyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrFreeRTOSTasks_MovedTaskToReadyState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[32]"></a>EvrFreeRTOSTasks_PostMovedTaskToReadyState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, freertos_evr.o(i.EvrFreeRTOSTasks_PostMovedTaskToReadyState))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrFreeRTOSTasks_PostMovedTaskToReadyState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[33]"></a>EvrFreeRTOSTasks_TaskIncrementTick</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, freertos_evr.o(i.EvrFreeRTOSTasks_TaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrFreeRTOSTasks_TaskIncrementTick &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[34]"></a>EvrFreeRTOSTasks_TaskPriorityDisinherit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, freertos_evr.o(i.EvrFreeRTOSTasks_TaskPriorityDisinherit), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrFreeRTOSTasks_TaskPriorityDisinherit &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[35]"></a>EvrFreeRTOSTasks_TaskPriorityInherit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, freertos_evr.o(i.EvrFreeRTOSTasks_TaskPriorityInherit), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrFreeRTOSTasks_TaskPriorityInherit &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
</UL>

<P><STRONG><a name="[36]"></a>EvrFreeRTOSTasks_TaskSwitchedIn</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, freertos_evr.o(i.EvrFreeRTOSTasks_TaskSwitchedIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EvrFreeRTOSTasks_TaskSwitchedIn &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[37]"></a>EvrFreeRTOSTasks_TaskSwitchedOut</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, freertos_evr.o(i.EvrFreeRTOSTasks_TaskSwitchedOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrFreeRTOSTasks_TaskSwitchedOut &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[5]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0plus.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os2.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; EvrFreeRTOSTasks_TaskIncrementTick &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0plus.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_armcm0plus.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0plus.o(.text)
</UL>
<P><STRONG><a name="[16]"></a>_mutex_acquire</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, clib_arm.o(i._mutex_acquire), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _mutex_acquire &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EvrFreeRTOSTasks_TaskIncrementTick &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[17]"></a>_mutex_free</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, clib_arm.o(i._mutex_free), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _mutex_free &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EvrFreeRTOSTasks_TaskIncrementTick &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[18]"></a>_mutex_initialize</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, clib_arm.o(i._mutex_initialize), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _mutex_initialize &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; EvrFreeRTOSTasks_PostMovedTaskToReadyState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[19]"></a>_mutex_release</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, clib_arm.o(i._mutex_release), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _mutex_release &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; EvrFreeRTOSTasks_TaskPriorityDisinherit &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[50]"></a>pvPortMalloc</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EvrFreeRTOSTasks_TaskIncrementTick &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSHeap_Malloc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[62]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[41]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[58]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[5f]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[43]"></a>vListInsert</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, list.o(i.vListInsert), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[42]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[4a]"></a>vPortEnterCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[4b]"></a>vPortExitCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
</UL>

<P><STRONG><a name="[55]"></a>vPortFree</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EvrFreeRTOSTasks_TaskIncrementTick &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSHeap_Free
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[5e]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[3c]"></a>vQueueDelete</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(i.vQueueDelete), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EvrFreeRTOSTasks_TaskIncrementTick &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_QueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[60]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[4f]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[56]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[57]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout &rArr; EvrFreeRTOSTasks_TaskPriorityDisinherit &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_TaskPriorityDisinherit
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_PostMovedTaskToReadyState
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_MovedTaskToReadyState
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[51]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1a]"></a>vTaskSwitchContext</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vTaskSwitchContext &rArr; EvrFreeRTOSTasks_TaskSwitchedIn &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_TaskSwitchedOut
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_TaskSwitchedIn
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[39]"></a>xPortSysTickHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; EvrFreeRTOSTasks_TaskIncrementTick &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3e]"></a>xQueueCreateMutex</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateMutex), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; EvrFreeRTOSTasks_PostMovedTaskToReadyState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[3d]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, queue.o(i.xQueueCreateMutexStatic), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = xQueueCreateMutexStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; EvrFreeRTOSTasks_PostMovedTaskToReadyState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[5c]"></a>xQueueGenericCreate</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericCreate), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = xQueueGenericCreate &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; EvrFreeRTOSTasks_PostMovedTaskToReadyState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_QueueCreateFailed
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[5d]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericCreateStatic), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; EvrFreeRTOSTasks_PostMovedTaskToReadyState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_QueueCreateFailed
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>

<P><STRONG><a name="[48]"></a>xQueueGenericReset</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; EvrFreeRTOSTasks_PostMovedTaskToReadyState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[3f]"></a>xQueueGenericSend</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSend), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; EvrFreeRTOSTasks_TaskPriorityDisinherit &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_QueueSendFailed
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_QueueSend
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_BlockingOnQueueSend
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>

<P><STRONG><a name="[3b]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, queue.o(i.xQueueSemaphoreTake), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EvrFreeRTOSTasks_TaskIncrementTick &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_QueueReceiveFailed
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_QueueReceive
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_BlockingOnQueueReceive
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[61]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[38]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[5a]"></a>xTaskIncrementTick</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskIncrementTick &rArr; EvrFreeRTOSTasks_TaskIncrementTick &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_TaskIncrementTick
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_PostMovedTaskToReadyState
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_MovedTaskToReadyState
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[45]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskPriorityDisinherit &rArr; EvrFreeRTOSTasks_TaskPriorityDisinherit &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_TaskPriorityDisinherit
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_PostMovedTaskToReadyState
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_MovedTaskToReadyState
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[63]"></a>xTaskPriorityInherit</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskPriorityInherit &rArr; EvrFreeRTOSTasks_TaskPriorityInherit &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_TaskPriorityInherit
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_PostMovedTaskToReadyState
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_MovedTaskToReadyState
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[4e]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTaskRemoveFromEventList &rArr; EvrFreeRTOSTasks_PostMovedTaskToReadyState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_PostMovedTaskToReadyState
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_MovedTaskToReadyState
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[54]"></a>xTaskResumeAll</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; EvrFreeRTOSTasks_TaskIncrementTick &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_PostMovedTaskToReadyState
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSTasks_MovedTaskToReadyState
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[15]"></a>__main</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, assembly_file.o(test_array))
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3a]"></a>os_kernel_is_active</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, clib_arm.o(i.os_kernel_is_active), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[22]"></a>EventCheckFilter</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, eventrecorder.o(i.EventCheckFilter))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<P><STRONG><a name="[1d]"></a>EventGetTS</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, eventrecorder.o(i.EventGetTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EventGetTS &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<P><STRONG><a name="[23]"></a>EventRecordItem</STRONG> (Thumb, 298 bytes, Stack size 64 bytes, eventrecorder.o(i.EventRecordItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<P><STRONG><a name="[1f]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eventrecorder.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_inc32
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[20]"></a>atomic_inc32</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, eventrecorder.o(i.atomic_inc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[52]"></a>prvHeapInit</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[53]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[44]"></a>prvCopyDataToQueue</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; EvrFreeRTOSTasks_TaskPriorityDisinherit &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[64]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, queue.o(i.prvGetDisinheritPriorityAfterTimeout), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[46]"></a>prvInitialiseMutex</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, queue.o(i.prvInitialiseMutex), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; EvrFreeRTOSTasks_TaskPriorityDisinherit &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_CreateMutexFailed
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_CreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[47]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, queue.o(i.prvInitialiseNewQueue), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; EvrFreeRTOSTasks_PostMovedTaskToReadyState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrFreeRTOSQueue_QueueCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[49]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[4c]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[4d]"></a>prvUnlockQueue</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList &rArr; EvrFreeRTOSTasks_PostMovedTaskToReadyState &rArr; EventRecord2 &rArr; EventRecordItem &rArr; atomic_inc32
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[40]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[65]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
